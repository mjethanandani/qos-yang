<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,               
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc [
<!-- One method to get references from the online citation libraries.             
    There has to be one entity for each item to be referenced.                    
    An alternate method (rfc include) is described in the references. -->
    
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2474 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2474.xml">
<!ENTITY RFC2475 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2475.xml">
<!ENTITY RFC6020 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml">
<!ENTITY RFC6991 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6991.xml">
<!ENTITY RFC7950 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7950.xml">
<!ENTITY RFC8174 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8343 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8343.xml">
]>
<rfc
    category="std"
    consensus="true"
    docName="draft-ietf-rtgwg-qos-model-latest"
    ipr="trust200902"
    submissionType="IETF"
    xml:lang="en">
  
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <!-- used by XSLT processors -->

  <!-- For a complete list and description of processing instructions (PIs),        
    please see http://xml.resource.org/authoring/README.html. -->

  <!-- Below are generally applicable Processing Instructions (PIs) that
    most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc
    v1.32) -->

  <?rfc strict="yes" ?>

  <!-- give errors regarding ID-nits and DTD validation -->

  <!-- control the table of contents (ToC) -->

  <?rfc toc="yes"?>

  <!-- generate a ToC -->

  <?rfc tocdepth="4"?>

  <?rfc compact="yes" ?>

  <front>
    <title abbrev="YANG Models for QoS">YANG Models for Quality of Service (QoS) in IP networks</title>

    <author fullname="Aseem Choudhary" initials="A." surname="Choudhary">
      <organization>Aviatrix Systems</organization>

      <address>
        <postal>
          <street>170 W Tasman Dr</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>US</country>
        </postal>

        <email>asechoud@cisco.com</email>
      </address>
    </author>

    <author fullname="Mahesh Jethanandani" initials="M."
            surname="Jethanandani">
      <organization>Kloud Services</organization>

      <address>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>

    <author fullname="Ebben Aries" initials="E."
            surname="Aries">
      <organization>Juniper Networks</organization>

      <address>
        <postal>
          <street>1194 North Mathilda Avenue</street>

          <city>Sunnyvale</city>

          <region>CA</region>

          <code>94089</code>

          <country>US</country>
        </postal>

        <email>exa@juniper.net</email>
      </address>
    </author>

    <author fullname="Ing-Wher Chen" initials="I."
            surname="Chen">
      <organization>The MITRE Corporation</organization>

      <address>
        <email>ingwherchen@mitre.org</email>
      </address>
    </author>
    <date/>

    <abstract>
      <t>
	This document describes a YANG model for management of Quality
	of Service (QoS) in IP networks.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>
	This document defines a <xref target="RFC7950">YANG 1.1</xref>
	model for Quality of Service (QoS) configuration and
	operational parameters as they relate to IP networks. Traffic
	Policy module defines the basic building blocks to define a
	classifier, policy and target. QoS Action module defines QoS
	action related parameters. Traffic policy is augmented to
	include packet match and action parameters to define the
	Differentiated Services (DiffServ) policy, Queues policy and
	Scheduler policy. Each of these policies are defined as
	separate modules. The DiffServ module is based on DiffServ
	architecture, and various references have been made to
	available standard architecture documents. QoS statistics
	counters are defined in QoS Operational module.
      </t>

      <t>
	While there are other approaches to offering QoS services,
	this document focuses on DiffServ as the approach for
	providers to offer services to different customers based on
	their network QoS objectives. The traffic streams are
	differentiated based on DiffServ Code Points (DSCP) carried in
	the IP header of each packet. The DSCP markings are applied by
	upstream node or by the edge router on entry to the DiffServ
	network.
      </t>

      <t>
	The YANG modules in this document conform to the <xref
	target="RFC8342">Network Management Datastore Architecture
	(NMDA)</xref>.
      </t>

      <t>
	Tree diagrams used in this document follow the notation
	defined in <xref target="RFC8340">YANG Tree Diagrams</xref>.
      </t>

      <section>
	<name>Note to RFC Editor</name>
	<t> Editorial Note: (To be removed by RFC Editor) </t>
	<t>
	  This draft contains several placeholder values that need to
	  be replaced with finalized values at the time of
	  publication.  Please apply the following replacements:
	  <ul>
	    <li>
	      "XXXX" --> the assigned RFC value for this draft both in
	      this draft and in the yang modules under the revision
	      statement.
	    </li>

	    <li>
	      The "revision" date in model, in the format XXXX-XX-XX,
	      needs to be updated with the date the draft gets
	      approved.
	    </li>
	  </ul>
	</t>
      </section>
      
      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
        RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
        interpreted as described in BCP 14 <xref target="RFC2119"/>
        <xref target="RFC8174"/> when, and only when, they appear in
        all capitals, as shown here.</t>
      </section>
      <section title="Definitions and Acronyms">
	<t>This document uses definitions and acronyms defined in
	<xref target="RFC2474">Definitions of the Differentiated
	Services Field (DS Field) in the IPv4 and IPv6 Headers</xref>,
	<xref target="RFC2475">An Architecture for Differentiated
	Services</xref>, and other documents. Here are some of them.
	</t>
        <t>
	  <ul>
	    <li>Active Queue Management (AQM): An activity that marks
	    or drops packets before the queue is full.</li>
	    <li>Behavior Aggregate (BA): A DS behavior aggregate.</li>
	    <li>Classifier: an entity which selects packets based on
	    the content of packet headers according to defined
	    rules.</li>
            <li>CoDel: Controlled Delay AQM algorithm</li>
	    <li>DS behavior aggregate: A collection of packets with
	    the same DS codepoint crossing a link in a particular
	    direction.</li>
	    <li>DS code point: A specific value of the DSCP portion of
	    the DS field, used to select a PHB.</li>
	    <li>DiffServ: Differentiated Services enhancements to
	    the Internet protocol are intended to enable scalable
	    service discrimination in the Internet without the need
	    for per-flow state and signaling at every hop.  A
	    variety of services may be built from a small,
	    well-defined set of building blocks which are deployed
	    in network nodes.</li>
	    <li>DSCP: Differentiated Services Code Point</li>
	    <li>ECN: Explicit Congestion Notification</li>
            <li>FQ-CoDel: Flow Queue Controlled Delay AQM algorithm</li>
	    <li>Marking: the process of setting the DS codepoint in
            a packet based on defined rules; pre-marking, re-marking.
	    </li>
	    <li>Metering: the process of measuring the temporal
            properties (e.g., rate) of a traffic stream
            selected by a classifier. The instantaneous state of
	    this process may be used to affect the operation of a
	    marker, shaper, or dropper, and/or may be used for
            accounting and measurement purposes.</li>
	    <li>MF Classifier: A multi-field (MF) classifier which
	    selects packets based on the content of some arbitrary
	    number of header fields; typically some combination of
	    source address, destination address, DS field, protocol
	    ID, source port and destination port.</li>
	    <li>Per-Hop-Behavior (PHB): A description of the externally
            observable forwarding treatment applied at a differentiated
            services-compliant node to a behavior aggregate
            <xref target="RFC2474"></xref>. The description of a PHB
            SHOULD be sufficiently detailed to allow the construction
            of predictable services, as documented in
            <xref target="RFC2475"></xref>.</li>
	    <li>Policing: the process of
	    discarding packets (by a dropper) within a traffic stream
	    in accordance with the state of a corresponding meter
	    enforcing a traffic profile.</li>
	    <li>RED: Random Early Detection</li>
	    <li>Shaping: the process of delaying packets within a
	    traffic stream to cause it to conform to some defined
	    traffic profile.</li>
	    <li>Traffic-Group: a logical collection of packets or
	    flows that share similar service requirements and are
	    treated collectively for traffic management purposes,
	    including prioritization, shaping, policing, or resource
	    reservation.</li>
	    <li>WRED: Weighted Random Early Detection</li>
	  </ul>
	</t>
      </section>
    </section>
    
    <section title="QoS Model Design">
      <t> The overall objective of this model design is to offer a
      base set of modules that can then be further augmented to
      provide other models, such as Differentiated Services (DiffServ)
      and Policy Based Routing (PBR). Those models would augment the
      base modules defined in this draft to define their own
      model. This document defines one such model, DiffServ. The
      design also takes into consideration that vendors might want to
      extend the model to add their own extensions, such as the
      Traffic Policy module, to provide constructs of policy for
      different QoS functionalities."</t>

      <figure>
        <name>QoS Yang Modules Layout</name>
        <artwork>
         -------------   ------------   ------------   ------------
        |             | |            | |            | |            |
        | DiffServ    | | Queue      | | Scheduling | | QoS        |
        | Policy      | | Policy     | | Policy     | | Oper       |
        |             | |            | |            | |            |
         -------------   ------------   ------------   ------------
         -------------   ------------------------------------------
        |             | |                                          |
        | QoS Action  | |  Traffic Policy                          |
        |             | | (Base Policy, Classifier, Target)        |
        |             | |                                          |
         -------------   ------------------------------------------
        </artwork>
      </figure>

      <t> The above diagram depicts the design of the QoS model. It
      uses Traffic Policy and QoS Action as base modules, which are
      augmented by the remaining modules on the top to define
      different aspects of QoS.</t>

      <t> The Classifier is defined as part of Traffic Policy Module. A
      classifier consists of set of filters and an operation that is
      performed on those filters. Each filter defines a rule on a
      particular packet header or packet metadata field that dictate
      how the packet will be classified based on that particular
      field, e.g. whether it will be classified based on DSCP, or will
      be classified based on source IPv4 address prefix. The operation
      defines whether these filters are logically AND or OR. The
      filters may be based on a combination of values or range of
      values of different packet header fields or packet metadata
      fields. An example of how these filter definitions are used can
      be seen in the DiffServ model. The DiffServ model augments the
      filter node in the Classifier to add in DiffServ specific filter
      parameters.</t>

      <t>One or more packet conditioning functions may be applied
      to a classifier which may drop, mark, or delay packets.
      These are defined in the QoS Action module. A set of
      classifiers with corresponding conditioning functions when 
      arranged in order of priority represent a QoS policy.
      These policies are defined in Traffic Policy module.</t>

      <t>The QoS Action module defines marking, metering and
      queuing. QoS actions are configured in line or referred to in
      DiffServ, Queuing, and Scheduling Policy modules.</t>

      <t>A Meter meters each packet and passes the packet and the
      metering result to the Marker. Meter is modeled based on
      commonly used algorithms in industry, <xref target="RFC2697">A
      Single Rate Three Color Marker (srTCM) </xref>, <xref
      target="RFC2698">A Two Rate Three Color Marker (trTCM)</xref>,
      and A Single Rate Two Color Marker. Different vendors can extend
      it with other types of meters as well.  Meter is defined in QoS
      Action module.</t>

      <t>Queue Policy module allows queues to be referred in a
      policy. The match is based on Traffic Group and action
      parameters are used as defined in QoS Action module.</t>

      <t> Scheduling Policy module defines a set of scheduling
      parameters and associates Queue Policy with it.</t>

      <t>QoS counters are defined in QoS Operational module. It includes
      counters for Classifiers, Meters and Queues associated with a QoS
      policy applied in each direction of traffic. To modularize and for
      reusability, grouping have been defined for various counters of
      Classifier, Meters and Queues.  The target is assumed to be
      interface but the groupings can be used for any other target
      type where QoS policy is applied.</t>
    </section>

    <section title="DiffServ Model Design">
      <t><xref target="RFC2475">Definition of the Differentiated
      Services Field (DS Field) in the IPv4 and IPv6 Headers</xref>
      describes the architecture as a simple model where traffic
      entering a network is classified and possibly conditioned at the
      boundary of the network and assigned a different Behavior
      Aggregate (BA). Each BA is identified by a specific value of
      DSCP, and is used to select a Per Hop Behavior (PHB).</t>

      <t>The packet classification policy identifies the subset of
      traffic which may receive a DiffServ by being conditioned or
      mapped. Packet classifiers select packets within a stream based
      on the content of some portion of the packet header. There are
      two types of classifiers, the BA classifier, and the Multi-Field
      (MF) classifier which selects packets based on a value which is
      combination of one or more header fields. In the DiffServ Policy
      module, this is realized by augmenting the classifier in
      Traffic Policy module.</t>

      <t>Traffic conditioning includes metering, shaping and/or
      marking.  A Meter is used to measure the traffic against a given
      traffic profile. The traffic profile specifies the temporal
      property of the traffic. A packet that arrives is first
      determined to be in or out of the profile, which will result in
      the action of marked, dropped or shaped. This is realized in
      vendor specific modules based on the parameters defined in
      action module. The metering parameters are augmented to the QoS
      policy module when metering is defined inline, and to the
      metering template when metering profile is referred in policy
      module. </t>

      <section title="A Single Rate Three Color Marker">
	<t>This document defines support for <xref target="RFC2697">A
	Single Rate Three Color Marker (srTCM)</xref>, which is one of
	the components in a <xref target="RFC2475">An Architecture for
	Differentiated Services</xref>. The srTCM meters a traffic
	stream and marks its packets according to three traffic
	parameters, Committed Information Rate (CIR), Committed Burst
	Size (CBS), and Excess Burst Size (EBS), to be either green,
	yellow, or red.  A packet is marked green if it doesn't exceed
	the CBS, yellow if it does exceed the CBS, but not the EBS,
	and red otherwise.</t>
      </section>

      <section title="A Two Rate Three Color Marker">
	<t>This document defines support for <xref target="RFC2698">A
	Two Rate Three Color Marker (trTCM)</xref>, which is one of
	the components in a <xref target="RFC2475">An Architecture for
	Differentiated Services</xref>. The trTCM meters a traffic
	stream and marks its packets according to two rates, Peak
	Information Rate (PIR), the Committed Information Rate (CIR),
	and their associated burst sizes to either green, yellow, or
	red. A packet is marked red if it exceeds the PIR. Otherwise,
	it is marked yellow or green depending on whether it exceeds
	or does not exceed the CIR.</t>
      </section>

    </section>

    <section title="YANG Modules">
      <t>
      Modules defined in this draft import definitions from <xref
      target="RFC6991">Common YANG Data Types</xref> and <xref
      target="RFC8343">A YANG Data Model for Interface
      Management</xref>.
      </t>

      <section title="Traffic Policy Module">

	<t>Traffic Policy module contains list of classifiers
	identified by a classifier name. Each classifier MAY contain a
	list of filters.</t>

	<t>This module also contains list of policy objects identified
	by a policy name and policy type which MUST be
	provided. Policy-type is of type identity and is populated in
	a vendor specific manner. With different values of policy
	types, each vendor MAY define their own construct of policy
	for different QoS functionalities. Each vendor MAY augment
	classifier entry in a policy definition with a set of
	actions.</t>

	<t>The module also augments <xref target="RFC8343">A YANG Data
	Model for Interface Management</xref> module to add a target
	policy. A single policy of a particular policy-type can be
	applied on an interface in each direction of traffic.</t>

	<figure>
	  <name>ietf-traffic-policy abridged tree diagram</name>
          <artwork><![CDATA[
	  INSERT_TEXT_FROM_FILE(../bin/ietf-traffic-policy@YYYY-MM-DD-sub-tree.txt)
	  ]]></artwork>
	</figure>

        <figure>
	  <name>ietf-traffic-policy module</name>
          <artwork><![CDATA[
	  <CODE BEGINS> file "ietf-traffic-policy@YYYY-MM-DD.yang"
	  INSERT_TEXT_FROM_FILE(../bin/ietf-traffic-policy@YYYY-MM-DD.yang)
	  <CODE ENDS>
	  ]]></artwork>
        </figure>
      </section>

      <section title="QoS Action Module">
	<t>QoS Action module includes actions such marking, metering,
	or queuing. Metering, marking, queuing, and scheduling actions
	are realized by augmenting the Traffic Policy module. Marking
	sets DiffServ codepoint value in the classified
	packet.</t>

	<figure>
	  <name>ietf-qos-actions abridged tree diagram</name>
          <artwork><![CDATA[
	  INSERT_TEXT_FROM_FILE(../bin/ietf-qos-action@YYYY-MM-DD-sub-tree.txt)
	  ]]></artwork>
	</figure>

        <figure>
	  <name>ietf-qos-actions module</name>
          <artwork><![CDATA[
	  <CODE BEGINS>file "ietf-qos-action@YYYY-MM-DD.yang"
	  INSERT_TEXT_FROM_FILE(../bin/ietf-qos-action@YYYY-MM-DD.yang)
	  <CODE ENDS>
	  ]]></artwork>
        </figure>
      </section>

      <section title="DiffServ Module">
	<t>DiffServ module augments Traffic Policy module to enable
  diffrentiated services for different types of packets.</t>

	<figure>
	  <name>ietf-diffserv abridged tree diagram</name>
          <artwork><![CDATA[
	  INSERT_TEXT_FROM_FILE(../bin/ietf-diffserv@YYYY-MM-DD-sub-tree.txt)
	  ]]></artwork>
	</figure>

        <figure>
	  <name>ietf-diffserv module</name>
          <artwork><![CDATA[
	  <CODE BEGINS>file "ietf-diffserv@YYYY-MM-DD.yang"
	  INSERT_TEXT_FROM_FILE(../bin/ietf-diffserv@YYYY-MM-DD.yang)
	  <CODE ENDS>
	  ]]></artwork>
        </figure>
      </section>

      <section title="QoS Operational Module">
	<t>QoS Operational module contains all operational
	statistics. It contains statistics related to classifier,
	metering, queueing, and named.</t>

	<t>Classifier statistics consist of list of classifier entries
	identified by a classifier entry name.  Classifier counters
	include matched packets and bytes, and average rate of traffic
	matching a particular classifier.</t>

	<t>Metering statistics consist of meters identified by an
	identifier.  Metering counters include conform, exceed,
	violate, drop packets, and bytes.</t>

	<t>Queuing counters include instantaneous, peak, average queue
	length, as well as output conform, exceed, tail drop packets
	and bytes.</t>

	<t>Named statistics is defined as statistics which is tagged
	by a name.  This could be aggregated or non-aggregated.
	Aggregated named statistics is defined as counters which are
	aggregated across classifier entries in a policy applied to an
	interface in a particular direction.  Non-aggregated named
	statistics are counters of classifier, metering or queuing
	which have the same tag name but maintained separately.</t>

	<t>A clear action is provided to clear all statistics
  or statistics of a particular kind.</t>

	<figure>
	  <name>ietf-qos-oper abridged tree diagram</name>
          <artwork><![CDATA[
	  INSERT_TEXT_FROM_FILE(../bin/ietf-qos-oper@YYYY-MM-DD-sub-tree.txt)
	  ]]></artwork>
	</figure>
        <figure>
	  <name>ietf-qos-oper module</name>
          <artwork><![CDATA[
	  <CODE BEGINS>file "ietf-qos-oper@YYYY-MM-DD.yang"
	  INSERT_TEXT_FROM_FILE(../bin/ietf-qos-oper@YYYY-MM-DD.yang)
	  <CODE ENDS>
	  ]]></artwork>
        </figure>
      </section>

      <section title="Scheduler Policy Module">
	<t> Scheduling Policy module defines a set of scheduling
	parameters and associates a Queue Policy with it.</t>
	<figure>
	  <name>ietf-scheduler-policy abridged abridged tree diagram</name>
          <artwork><![CDATA[
	  INSERT_TEXT_FROM_FILE(../bin/ietf-scheduler-policy@YYYY-MM-DD-sub-tree.txt)
	  ]]></artwork>
	</figure>
        <figure>
	  <name>ietf-scheduler-policy module</name>
          <artwork><![CDATA[
	  <CODE BEGINS>file "ietf-scheduler-policy@YYYY-MM-DD.yang"
	  INSERT_TEXT_FROM_FILE(../bin/ietf-scheduler-policy@YYYY-MM-DD.yang)
	  <CODE ENDS>
	  ]]></artwork>
        </figure>
      </section>

      <section title="Queue Policy Module">
	<t>Queue Policy module augments the Traffic Policy module. It
	augments to allow queues to be referred to in a policy. The
	match is based on Traffic Group and action parameters which
	are defined in QoS Action module.</t>

	<figure>
	  <name>ietf-queue-policy abridged tree diagram</name>
          <artwork><![CDATA[
	  INSERT_TEXT_FROM_FILE(../bin/ietf-queue-policy@YYYY-MM-DD-sub-tree.txt)
	  ]]></artwork>
	</figure>

        <figure>
	  <name>ietf-queue-policy module</name>
          <artwork><![CDATA[
	  <CODE BEGINS>file "ietf-queue-policy@YYYY-MM-DD.yang"
	  INSERT_TEXT_FROM_FILE(../bin/ietf-queue-policy@YYYY-MM-DD.yang)
	  <CODE ENDS>
	  ]]></artwork>
        </figure>
      </section>

      <section title="IANA QoS Types Module">
	<t>The QoS Types module contains all the type definitions used
	by the other QoS modules.</t>

	<figure>
	  <name>ietf-qos-types module</name>
          <artwork><![CDATA[
	  <CODE BEGINS>file "ietf-qos-types@YYYY-MM-DD.yang"
	  INSERT_TEXT_FROM_FILE(../bin/ietf-qos-types@YYYY-MM-DD.yang)
	  <CODE ENDS>
	  ]]></artwork>
	</figure>
      </section>
    </section>

    <section title="IANA Considerations">
      <t>This document registers seven URIs and seven YANG
      modules.</t>

      <section title="URI Registration">
        <t>Following the format in the <xref target="RFC3688">IETF XML
        registry</xref>, the following registration is requested to
        be made:
	<figure>
          <artwork><![CDATA[
	  URI: urn:ietf:params:xml:ns:yang:ietf-qos-types
	  URI: urn:ietf:params:xml:ns:yang:ietf-diffserv
	  URI: urn:ietf:params:xml:ns:yang:ietf-qos-action
	  URI: urn:ietf:params:xml:ns:yang:ietf-qos-oper
	  URI: urn:ietf:params:xml:ns:yang:ietf-queue-policy
	  URI: urn:ietf:params:xml:ns:yang:ietf-scheduler-policy
	  URI: urn:ietf:params:xml:ns:yang:ietf-traffic-policy
	  ]]></artwork>
        </figure>
	</t>

        <t>Registrant Contact: The IESG. XML: N/A, the requested URI
        is an XML namespace.</t>
      </section>

      <section title="YANG Module Name Registration">
        <t>This document registers seven YANG modules in the YANG
        Module Names registry <xref target="RFC6020">YANG</xref>.</t>

        <t><figure>
            <artwork><![CDATA[
	    name: ietf-qos-types
	    namespace: urn:ietf:params:xml:ns:yang:ietf-qos-types
	    prefix: qos-types
	    reference: RFC XXXX

	    name: ietf-diffserv
	    namespace: urn:ietf:params:xml:ns:yang:ietf-diffserv
	    prefix: diffserv
	    reference: RFC XXXX

	    name: ietf-qos-action
	    namespace: urn:ietf:params:xml:ns:yang:ietf-qos-action
	    prefix: action
	    reference: RFC XXXX

	    name: ietf-qos-oper
	    namespace: urn:ietf:params:xml:ns:yang:ietf-qos-oper
	    prefix: oper
	    reference: RFC XXXX

	    name: ietf-queue-policy
	    namespace: urn:ietf:params:xml:ns:yang:ietf-queue-policy
	    prefix: queue-policy
	    reference: RFC XXXX

	    name: ietf-scheduler-policy
	    namespace: urn:ietf:params:xml:ns:yang:ietf-scheduler-policy
	    prefix: scheduler-policy
	    reference: RFC XXXX

	    name: ietf-traffic-policy
	    namespace: urn:ietf:params:xml:ns:yang:ietf-traffic-policy
	    prefix: policy
	    reference: RFC XXXX
	    ]]></artwork>
          </figure>
	</t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>The YANG module specified in this document defines a schema
      for data that is designed to be accessed via network management
      protocols such as <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. The lowest NETCONF layer is
      the secure transport layer, and the mandatory-to-implement
      secure transport is <xref target="RFC6242">Secure Shell
      (SSH)</xref>. The lowest RESTCONF layer is HTTPS, and the
      mandatory-to-implement secure transport is <xref
      target="RFC8446">TLS</xref>. The <xref target="RFC8341">NETCONF
      Access Control Model (NACM) </xref> provides the means to
      restrict access for particular NETCONF or RESTCONF users to a
      preconfigured subset of all available NETCONF or RESTCONF
      protocol operations and content.</t>

      <t>There are a number of data nodes defined in this YANG module
      that are writable/creatable/deletable (i.e., config true, which
      is the default).  These data nodes may be considered sensitive
      or vulnerable in some network environments. Write operations
      (e.g., edit-config) to these data nodes without proper
      protection can have a negative effect on network
      operations. Some of the subtrees and data nodes and their
      sensitivity/vulnerability are described here.</t>

      <t>- 'filter-operation' and 'filter'. 'filter-operation'
      includes the ability to 'match all', which is a logical AND
      operation or 'match any', which is a logical OR operation. Both
      the operations have an impact on the traffic that is being
      classified. Similarly, the 'filter' list decides what parts of
      the packet will examined, which will also impact the traffic
      that is being classified.</t>

      <t>- 'action'. The 'action' decides what action will be taken on
      the packet. That includes whether the packet will be marked,
      queued, or just discarded.</t>

      <t>Some of the readable data nodes in this YANG module may be
      considered sensitive or vulnerable in some network
      environments. It is thus important to control read access (e.g.,
      via get, get-config, or notification) to these data nodes. Some
      of the subtrees and data nodes and their
      sensitivity/vulnerability are:</t>

      <t>- 'conform-pkts', 'conform-bytes', 'exceed-pkts',
      'exceed-bytes', 'voilate-pkts' or 'voilate-bytes'. All these
      statistics combined with their 'meter-id' are an indication of
      what is happening in the network, and can allow for an intruder
      insight into how to disrupt the traffic.</t>

      <t>- 'tail-drop-pkts', 'red-drop-bytes', 'wred-stats' are
      examples of statistics that indicate the kind of traffic that is
      being profiled for drop or marked for Explicit Congestion
      Notification (ECN), and can give an insight into the operation
      of a network.</t>

      <t>Some of the RPC operations in this YANG module may be
      considered sensitive or vulnerable in some network
      environments. It is thus important to control access to these
      operations. These are the operations and their
      sensitivity/vulnerability:</t>

      <t>- The model allows for statistics to be cleared by the
      'clear' RPC operation, causing all the individual statistics to
      be cleared.</t>
    </section>

    <section anchor="ack" title="Acknowledgement">
    <t> The authors wish to thank Ruediger Geib, Fred Baker, Greg
    Mirsky, Tom Petch, Acee Lindem, many others for their helpful
    comments. </t>
    </section>

    <section anchor="contrib" title="Contributors">
    <t>  The following people have substantially contributed to the editing of this document:  </t>
    <figure>
    <artwork>
    <![CDATA[Norm Strahle      
    Email: nstrahle@juniper.net       .]]>
    </artwork> </figure>
    <figure>
    <artwork>
    <![CDATA[Shitanshu Shah
    Email: svshah@cisco.com       .]]>
    </artwork> </figure>
    </section>
</middle>


  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629;
        here (as shown)
    2. simply use a PI
        "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds:
          include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")
    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included
    files in the same directory as the including file. You can also define
    the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be
    either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include=
      "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->

      &RFC2119;

      &RFC6020;

      &RFC6991;

      &RFC7950;

      &RFC8174;

      <?rfc include='reference.RFC.8342.xml'?>
      <?rfc include='reference.RFC.8343.xml'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.2474.xml'?>
      <?rfc include='reference.RFC.2475.xml'?>
      <?rfc include='reference.RFC.2697.xml'?>
      <?rfc include='reference.RFC.2698.xml'?>
      <?rfc include='reference.RFC.3688.xml'?>
      <?rfc include='reference.RFC.6241.xml'?>
      <?rfc include='reference.RFC.6242.xml'?>
      <?rfc include='reference.RFC.8040.xml'?>
      <?rfc include='reference.RFC.8340.xml'?>
      <?rfc include='reference.RFC.8341.xml'?>
      <?rfc include='reference.RFC.8446.xml'?>
    </references>

    <section anchor="appendixA" title="Complete tree Diagrams">
      <t>This section carries complete tree diagrams of each module
      defined in this draft. The tree diagrams use the notation
      defined in <xref target="RFC8340">YANG Tree Diagrams</xref>.</t>

      <section title="Traffic Policy Module Tree Diagram">
        <figure>
	        <name>Traffic Policy Tree Diagram</name>
          <artwork><![CDATA[
	        INSERT_TEXT_FROM_FILE(../bin/ietf-traffic-policy@YYYY-MM-DD-tree.txt)
	        ]]></artwork>
        </figure>
      </section>
            <section title="QoS Action Module Tree Diagram">
        <figure>
	        <name>QoS Action Module Tree Diagram</name>
          <artwork><![CDATA[
	        INSERT_TEXT_FROM_FILE(../bin/ietf-qos-action@YYYY-MM-DD-tree.txt)
	        ]]></artwork>
        </figure>
      </section>
      <section title="DiffServ Module Tree Diagram">
        <figure>
	        <name>DiffServ Module Tree Diagram</name>
          <artwork><![CDATA[
	        INSERT_TEXT_FROM_FILE(../bin/ietf-diffserv@YYYY-MM-DD-tree.txt)
	        ]]></artwork>
        </figure>
      </section>
      <section title="QoS Operational Module Tree Diagram">
        <figure>
	        <name>QoS Operational Module Tree Diagram</name>
          <artwork><![CDATA[
	        INSERT_TEXT_FROM_FILE(../bin/ietf-qos-oper@YYYY-MM-DD-tree.txt)
	        ]]></artwork>
        </figure>
      </section>
      <section title="Scheduler Policy Module Tree Diagram">
        <figure>
	        <name>Scheduler Policy Module Tree Diagram</name>
          <artwork><![CDATA[
	        INSERT_TEXT_FROM_FILE(../bin/ietf-scheduler-policy@YYYY-MM-DD-tree.txt)
	        ]]></artwork>
        </figure>
      </section>
      <section title="Queue Policy Module Tree Diagram">
        <figure>
	        <name>Queue Policy Module Tree Diagram</name>
          <artwork><![CDATA[
	        INSERT_TEXT_FROM_FILE(../bin/ietf-queue-policy@YYYY-MM-DD-tree.txt)
	        ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Company A and Company B examples">
      <t>Company A and Company B DiffServ modules augments all the filter types of the QoS
      Classifier module as well as the QoS Policy module that allow it to
      define marking, metering, min-rate, max-rate actions. Queueing and
      metering counters are realized by augmenting of the QoS Target
      module.</t>

      <section title="Example of Company A DiffServ Model">
      <t> The following Company A vendor example augments the QoS and DiffServ model,
demonstrating some of the following functionality:
      </t>
        <t>- use of template based classifier definitions </t>
        <t>- use of single policy type modelling queue, scheduler
   policy, and a filter policy. All of these policies either augment
   the QoS policy or the DiffServ modules</t>
        <t>- use of inline actions in a policy</t>
        <t>- flexibility in marking dscp or metadata at ingress and/or egress. </t>
        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/example-compa-diffserv@YYYY-MM-DD.yang)
    ]]></artwork>
        </figure>
      </section>
      <section title="Example of Company B DiffServ Model">
      <t> The following vendor example augments the QoS and DiffServ model,
demonstrating some of the following functionality:
      </t>
 
        <t>- use of inline classifier definitions (defined inline in the policy
   vs referencing an externally defined classifier)</t>
        <t>- use of mulitple policy types, e.g. a queue policy, a scheduler
   policy, and a filter policy. All of these policies either augment
   the QoS policy or the DiffServ modules</t>
        <t>- use of a queue module, which uses and extends the queue grouping
   from the QoS Action module</t>
        <t>- use of meter templates (v.s. meter inline)</t>
        <t>- use of internal meta data for classification and marking</t>
        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/example-compb-diffserv-filter-policy@YYYY-MM-DD.yang)

INSERT_TEXT_FROM_FILE(../bin/example-compb-queue-policy@YYYY-MM-DD.yang)

INSERT_TEXT_FROM_FILE(../bin/example-compb-queue@YYYY-MM-DD.yang)

INSERT_TEXT_FROM_FILE(../bin/example-compb-scheduler-policy@YYYY-MM-DD.yang)
    ]]></artwork>
        </figure>
      </section>
    </section>
    <section title="Configuration examples">
      <t>This section describes several examples of how the models defined in this draft can be used for configuration.</t>
      <section title="Configuration example for QoS Classifier">
        <figure>
	  <name>Configuration example for QoS Classifier</name>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-qos-configuration-a.1.1.xml)
    ]]></artwork>
        </figure>
      </section>
      <section title="Configuration example for QoS Policy">
        <figure>
	  <name>Configuration example for QoS Policy</name>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-qos-configuration-a.1.2.xml)
    ]]></artwork>
        </figure>
      </section>
      <section title="Configuration example for QoS Policing">
        <figure>
	  <name>Configuration example for QoS Policing</name>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-qos-configuration-a.1.3.xml)
    ]]></artwork>
        </figure>
      </section>
      <section title="Configuration example for QoS Queueing">
        <figure>
	  <name>Configuration example for QoS Queueing</name>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-qos-configuration-a.1.4.xml)
    ]]></artwork>
        </figure>
      </section>
      <section title="Configuration example for QoS Scheduling">
        <figure>
	  <name>Configuration example for QoS Scheduling</name>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-qos-configuration-a.1.5.xml)
    ]]></artwork>
        </figure>
      </section>
    </section>
  </back>
</rfc>
